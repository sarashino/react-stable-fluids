/*! For license information please see main.min.js.LICENSE.txt */
!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("@react-three/fiber"),require("react"),require("three")):"function"==typeof define&&define.amd?define(["ReactThreeFiber","React","Three"],r):"object"==typeof exports?exports.ReactStableFluids=r(require("@react-three/fiber"),require("react"),require("three")):e.ReactStableFluids=r(e.ReactThreeFiber,e.React,e.Three)}(this,((e,r,n)=>(()=>{"use strict";var t={649:(e,r)=>{var n=Symbol.for("react.transitional.element"),t=Symbol.for("react.fragment");function o(e,r,t){var o=null;if(void 0!==t&&(o=""+t),void 0!==r.key&&(o=""+r.key),"key"in r)for(var u in t={},r)"key"!==u&&(t[u]=r[u]);else t=r;return r=t.ref,{$$typeof:n,type:e,key:o,ref:void 0!==r?r:null,props:t}}r.Fragment=t,r.jsx=o,r.jsxs=o},105:(e,r,n)=>{e.exports=n(649)},478:r=>{r.exports=e},156:e=>{e.exports=r},882:e=>{e.exports=n}},o={};function u(e){var r=o[e];if(void 0!==r)return r.exports;var n=o[e]={exports:{}};return t[e](n,n.exports,u),n.exports}u.d=(e,r)=>{for(var n in r)u.o(r,n)&&!u.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},u.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};u.r(i),u.d(i,{FluidOverlay:()=>C,default:()=>D});var c=u(478),s=u(156);const a=function(e){(0,s.useEffect)(e,[])};const l=function(e){var r=(0,s.useRef)(e);r.current=e,a((function(){return function(){return r.current()}}))};const v=function(e){var r=(0,s.useRef)(0),n=(0,s.useState)(e),t=n[0],o=n[1],u=(0,s.useCallback)((function(e){cancelAnimationFrame(r.current),r.current=requestAnimationFrame((function(){o(e)}))}),[]);return l((function(){cancelAnimationFrame(r.current)})),[t,u]};var f="undefined"!=typeof window;const d=function(e){var r=void 0===e?{}:e,n=r.initialWidth,t=void 0===n?1/0:n,o=r.initialHeight,u=void 0===o?1/0:o,i=r.onChange,c=v({width:f?window.innerWidth:t,height:f?window.innerHeight:u}),a=c[0],l=c[1];return(0,s.useEffect)((function(){if(f){var e=function(){var e=window.innerWidth,r=window.innerHeight;l({width:e,height:r}),i&&i(e,r)};return function(e){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];e&&e.addEventListener&&e.addEventListener.apply(e,r)}(window,"resize",e),function(){!function(e){for(var r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];e&&e.removeEventListener&&e.removeEventListener.apply(e,r)}(window,"resize",e)}}}),[]),a};var p=u(882),x=u(105),y="\nprecision highp float;\nuniform sampler2D velocity;\nuniform float dt;\nuniform bool isBFECC;\n// uniform float uvScale;\nuniform vec2 fboSize;\nuniform vec2 px;\nvarying vec2 uv;\n\nvoid main(){\n    vec2 ratio = max(fboSize.x, fboSize.y) / fboSize;\n\n    if(isBFECC == false){\n        vec2 vel = texture2D(velocity, uv).xy;\n        vec2 uv2 = uv - vel * dt * ratio;\n        vec2 newVel = texture2D(velocity, uv2).xy;\n        gl_FragColor = vec4(newVel, 0.0, 0.0);\n    } else {\n        vec2 spot_new = uv;\n        vec2 vel_old = texture2D(velocity, uv).xy;\n        // back trace\n        vec2 spot_old = spot_new - vel_old * dt * ratio;\n        vec2 vel_new1 = texture2D(velocity, spot_old).xy;\n\n        // forward trace\n        vec2 spot_new2 = spot_old + vel_new1 * dt * ratio;\n        \n        vec2 error = spot_new2 - spot_new;\n\n        vec2 spot_new3 = spot_new - error / 2.0;\n        vec2 vel_2 = texture2D(velocity, spot_new3).xy;\n\n        // back trace 2\n        vec2 spot_old2 = spot_new3 - vel_2 * dt * ratio;\n        // gl_FragColor = vec4(spot_old2, 0.0, 0.0);\n        vec2 newVel2 = texture2D(velocity, spot_old2).xy; \n        gl_FragColor = vec4(newVel2, 0.0, 0.0);\n    }\n}\n\t";const m=function(e){var r=e.src,n=e.dst,t=e.simProps,o=e.priority,u=(0,c.useThree)().gl,i=(0,s.useMemo)((function(){return new p.Scene}),[]),a=(0,s.useMemo)((function(){return new p.Camera}),[]),l=(0,s.useRef)(null),v=(0,s.useRef)(null),f=(0,s.useRef)({boundarySpace:{value:t.cellScale},px:{value:t.cellScale},fboSize:{value:t.fboSize},velocity:{value:r.texture},dt:{value:t.dt},isBFECC:{value:!0}});(0,s.useEffect)((function(){f.current.dt.value=t.dt,v.current&&(v.current.visible=t.isBounce),f.current.isBFECC.value=!!t.BFECC}),[t]),(0,s.useEffect)((function(){return l.current&&i.add(l.current),v.current&&i.add(v.current),function(){l.current&&i.remove(l.current),v.current&&i.remove(v.current)}}),[i]),(0,c.useFrame)((function(){f.current.velocity.value=r.texture,u.setRenderTarget(n),u.render(i,a),u.setRenderTarget(null)}),o);var d=new Float32Array([-1,-1,0,-1,1,0,-1,1,0,1,1,0,1,1,0,1,-1,0,1,-1,0,-1,-1,0]);return(0,x.jsxs)(x.Fragment,{children:[(0,x.jsxs)("mesh",{ref:l,children:[(0,x.jsx)("planeGeometry",{args:[2,2]}),(0,x.jsx)("rawShaderMaterial",{vertexShader:T,fragmentShader:y,uniforms:f.current})]}),(0,x.jsxs)("lineSegments",{ref:v,children:[(0,x.jsx)("bufferGeometry",{children:(0,x.jsx)("bufferAttribute",{attach:"position",array:d,itemSize:3})}),(0,x.jsx)("rawShaderMaterial",{vertexShader:"\nattribute vec3 position;\nvarying vec2 uv;\nuniform vec2 px;\n\n\nprecision highp float;\n\nvoid main(){\n    vec3 pos = position;\n    uv = 0.5 + pos.xy * 0.5;\n    vec2 n = sign(pos.xy);\n    pos.xy = abs(pos.xy) - px * 1.0;\n    pos.xy *= n;\n    gl_Position = vec4(pos, 1.0);\n}\n\t",fragmentShader:y,uniforms:f.current})]})]})};function g(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,r){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var t,o,u,i,c=[],s=!0,a=!1;try{if(u=(n=n.call(e)).next,0===r){if(Object(n)!==n)return;s=!1}else for(;!(s=(t=u.call(n)).done)&&(c.push(t.value),c.length!==r);s=!0);}catch(e){a=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(a)throw o}}return c}}(e,r)||function(e,r){if(e){if("string"==typeof e)return h(e,r);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,r):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,r){(null==r||r>e.length)&&(r=e.length);for(var n=0,t=Array(r);n<r;n++)t[n]=e[n];return t}const w=function(){var e=g((0,s.useState)((function(){return new p.Vector2})),2),r=e[0],n=e[1],t=g((0,s.useState)((function(){return new p.Vector2})),2),o=t[0],u=t[1],i=g((0,s.useState)((function(){return new p.Vector2})),2),c=i[0],a=i[1],l=function(e,t){u(r.clone()),n(new p.Vector2(e/window.innerWidth*2-1,-t/window.innerHeight*2+1))};return(0,s.useEffect)((function(){var e=function(e){l(e.clientX,e.clientY),a(r.clone().sub(o))},n=function(e){1===e.touches.length&&l(e.touches[0].pageX,e.touches[0].pageY),a(r.clone().sub(o))};return window.addEventListener("mousemove",e),window.addEventListener("touchstart",n),window.addEventListener("touchmove",n),function(){window.removeEventListener("mousemove",e),window.removeEventListener("touchstart",n),window.removeEventListener("touchmove",n)}}),[r]),{coords:r,coords_old:o,diff:c}};const _=function(e){var r=e.dst,n=e.cellScale,t=e.cursorSize,o=e.mouseForce,u=e.priority,i=(0,c.useThree)().gl,a=(0,s.useMemo)((function(){return new p.Scene}),[]),l=(0,s.useMemo)((function(){return new p.Camera}),[]),v=w(),f=(0,s.useRef)(null),d=(0,s.useRef)({px:{value:n},force:{value:new p.Vector2(0,0)},center:{value:new p.Vector2(0,0)},scale:{value:new p.Vector2(t,t)}});return(0,s.useEffect)((function(){return f.current&&a.add(f.current),function(){f.current&&a.remove(f.current)}}),[a]),(0,c.useFrame)((function(){var e=v.diff.x/2*o,u=v.diff.y/2*o;v.diff.set(0,0);var c=t*n.x,s=t*n.y,f=Math.min(Math.max(v.coords.x,-1+c+2*n.x),1-c-2*n.x),p=Math.min(Math.max(v.coords.y,-1+s+2*n.y),1-s-2*n.y);d.current.force.value.set(e,u),d.current.center.value.set(f,p),d.current.scale.value.set(t,t),i.setRenderTarget(r),i.render(a,l),i.setRenderTarget(null)}),u),(0,x.jsxs)("mesh",{ref:f,children:[(0,x.jsx)("planeGeometry",{arg:[1,1]}),(0,x.jsx)("rawShaderMaterial",{vertexShader:"\nprecision highp float;\n\nattribute vec3 position;\nattribute vec2 uv;\nuniform vec2 center;\nuniform vec2 scale;\nuniform vec2 px;\nvarying vec2 vUv;\n\nvoid main(){\n    vec2 pos = position.xy * scale * 2.0 * px + center;\n    vUv = uv;\n    gl_Position = vec4(pos, 0.0, 1.0);\n}\n\t",fragmentShader:"\nprecision highp float;\n\nuniform vec2 force;\nuniform vec2 center;\nuniform vec2 scale;\nuniform vec2 px;\nvarying vec2 vUv;\n\nvoid main(){\n    vec2 circle = (vUv - 0.5) * 2.0;\n    float d = 1.0-min(length(circle), 1.0);\n    d *= d;\n    gl_FragColor = vec4(force * d, 0, 1);\n}\n\t",blending:p.AdditiveBlending,uniforms:d.current})]})};const S=function(e){var r=e.src,n=e.dst0,t=e.dst1,o=e.dst,u=e.simProps,i=e.priority,a=(0,c.useThree)().gl,l=(0,s.useMemo)((function(){return new p.Scene}),[]),v=(0,s.useMemo)((function(){return new p.Camera}),[]),f=(0,s.useRef)(null),d=(0,s.useRef)({boundarySpace:{value:u.boundarySpace},velocity:{value:r.texture},velocity_new:{value:n.texture},v:{value:u.viscous},px:{value:u.cellScale},dt:{value:u.dt}});return(0,s.useEffect)((function(){f.current&&l.add(f.current)}),[]),(0,s.useEffect)((function(){d.current.v.value=u.viscous,d.current.dt.value=u.dt}),[u]),(0,c.useFrame)((function(){var e,i;d.current.velocity.value=r.texture,d.current.velocity_new.value=n.texture;for(var c=0;c<u.iterations_viscous;c++)c%2==0?(e=n,i=t):(e=t,i=n),d.current.velocity_new.value=e.texture,a.setRenderTarget(i),a.render(l,v),a.setRenderTarget(null);o.texture=i.texture}),i),(0,x.jsxs)("mesh",{ref:f,children:[(0,x.jsx)("planeGeometry",{args:[2,2]}),(0,x.jsx)("rawShaderMaterial",{vertexShader:T,fragmentShader:"\nprecision highp float;\nuniform sampler2D velocity;\nuniform sampler2D velocity_new;\nuniform float v;\nuniform vec2 px;\nuniform float dt;\n\nvarying vec2 uv;\n\nvoid main(){\n    // poisson equation\n    vec2 old = texture2D(velocity, uv).xy;\n    vec2 new0 = texture2D(velocity_new, uv + vec2(px.x * 2.0, 0)).xy;\n    vec2 new1 = texture2D(velocity_new, uv - vec2(px.x * 2.0, 0)).xy;\n    vec2 new2 = texture2D(velocity_new, uv + vec2(0, px.y * 2.0)).xy;\n    vec2 new3 = texture2D(velocity_new, uv - vec2(0, px.y * 2.0)).xy;\n\n    vec2 new = 4.0 * old + v * dt * (new0 + new1 + new2 + new3);\n    new /= 4.0 * (1.0 + v * dt);\n    \n    gl_FragColor = vec4(new, 0.0, 0.0);\n}\n",uniforms:d.current})]})};const b=function(e){var r=e.src,n=e.dst,t=e.simProps,o=e.priority,u=(0,c.useThree)().gl,i=(0,s.useMemo)((function(){return new p.Scene}),[]),a=(0,s.useMemo)((function(){return new p.Camera}),[]),l=(0,s.useRef)(null),v=(0,s.useRef)({boundarySpace:{value:t.boundarySpace},velocity:{value:r.texture},px:{value:t.cellScale},dt:{value:t.dt}});return(0,s.useEffect)((function(){l.current&&i.add(l.current)}),[]),(0,c.useFrame)((function(){v.current.velocity.value=r.texture,u.setRenderTarget(n),u.render(i,a),u.setRenderTarget(null)}),o),(0,x.jsxs)("mesh",{ref:l,children:[(0,x.jsx)("planeGeometry",{args:[2,2]}),(0,x.jsx)("rawShaderMaterial",{vertexShader:T,fragmentShader:"\nprecision highp float;\nuniform sampler2D velocity;\nuniform float dt;\nuniform vec2 px;\nvarying vec2 uv;\n\nvoid main(){\n    float x0 = texture2D(velocity, uv-vec2(px.x, 0)).x;\n    float x1 = texture2D(velocity, uv+vec2(px.x, 0)).x;\n    float y0 = texture2D(velocity, uv-vec2(0, px.y)).y;\n    float y1 = texture2D(velocity, uv+vec2(0, px.y)).y;\n    float divergence = (x1-x0 + y1-y0) / 2.0;\n\n    gl_FragColor = vec4(divergence / dt);\n}\n",uniforms:v.current})]})};const j=function(e){var r=e.src,n=e.dst0,t=e.dst1,o=e.dst,u=e.simProps,i=e.priority,a=(0,c.useThree)().gl,l=(0,s.useMemo)((function(){return new p.Scene}),[]),v=(0,s.useMemo)((function(){return new p.Camera}),[]),f=(0,s.useRef)(null),d=(0,s.useRef)({boundarySpace:{value:u.boundarySpace},pressure:{value:n.texture},divergence:{value:r.texture},px:{value:u.cellScale}});return(0,s.useEffect)((function(){f.current&&l.add(f.current)}),[]),(0,c.useFrame)((function(){var e,i;d.current.divergence.value=r.texture;for(var c=0;c<u.iterations_poisson;c++)c%2==0?(e=n,i=t):(e=t,i=n),d.current.pressure.value=e.texture,a.setRenderTarget(i),a.render(l,v),a.setRenderTarget(null);o.texture=i.texture}),i),(0,x.jsxs)("mesh",{ref:f,children:[(0,x.jsx)("planeGeometry",{args:[2,2]}),(0,x.jsx)("rawShaderMaterial",{vertexShader:T,fragmentShader:"\nprecision highp float;\nuniform sampler2D pressure;\nuniform sampler2D divergence;\nuniform vec2 px;\nvarying vec2 uv;\n\nvoid main(){    \n    // poisson equation\n    float p0 = texture2D(pressure, uv+vec2(px.x * 2.0,  0)).r;\n    float p1 = texture2D(pressure, uv-vec2(px.x * 2.0, 0)).r;\n    float p2 = texture2D(pressure, uv+vec2(0, px.y * 2.0 )).r;\n    float p3 = texture2D(pressure, uv-vec2(0, px.y * 2.0 )).r;\n    float div = texture2D(divergence, uv).r;\n    \n    float newP = (p0 + p1 + p2 + p3) / 4.0 - div;\n    gl_FragColor = vec4(newP);\n}\n",uniforms:d.current})]})};const F=function(e){var r=e.src_p,n=e.src_v,t=e.dst,o=e.simProps,u=e.priority,i=(0,c.useThree)().gl,a=(0,s.useMemo)((function(){return new p.Scene}),[]),l=(0,s.useMemo)((function(){return new p.Camera}),[]),v=(0,s.useRef)(null),f=(0,s.useRef)({boundarySpace:{value:o.boundarySpace},pressure:{value:r.texture},velocity:{value:n.texture},px:{value:o.cellScale},dt:{value:o.dt}});return(0,s.useEffect)((function(){v.current&&a.add(v.current)}),[]),(0,c.useFrame)((function(){f.current.pressure.value=r.texture,f.current.velocity.value=n.texture,i.setRenderTarget(t),i.render(a,l),i.setRenderTarget(null)}),u),(0,x.jsxs)("mesh",{ref:v,children:[(0,x.jsx)("planeGeometry",{args:[2,2]}),(0,x.jsx)("rawShaderMaterial",{vertexShader:T,fragmentShader:"\nprecision highp float;\nuniform sampler2D pressure;\nuniform sampler2D velocity;\nuniform vec2 px;\nuniform float dt;\nvarying vec2 uv;\n\nvoid main(){\n    float step = 1.0;\n\n    float p0 = texture2D(pressure, uv+vec2(px.x * step, 0)).r;\n    float p1 = texture2D(pressure, uv-vec2(px.x * step, 0)).r;\n    float p2 = texture2D(pressure, uv+vec2(0, px.y * step)).r;\n    float p3 = texture2D(pressure, uv-vec2(0, px.y * step)).r;\n\n    vec2 v = texture2D(velocity, uv).xy;\n    vec2 gradP = vec2(p0 - p1, p2 - p3) * 0.5;\n    v = v - gradP * dt;\n    gl_FragColor = vec4(v, 0.0, 1.0);\n}\n",uniforms:f.current})]})};const R=function(){var e={vel_0:(0,s.useMemo)((function(){return new p.WebGLRenderTarget(256,256,{type:p.HalfFloatType})})),vel_1:(0,s.useMemo)((function(){return new p.WebGLRenderTarget(256,256,{type:p.HalfFloatType})})),vel_viscous0:(0,s.useMemo)((function(){return new p.WebGLRenderTarget(256,256,{type:p.HalfFloatType})})),vel_viscous1:(0,s.useMemo)((function(){return new p.WebGLRenderTarget(256,256,{type:p.HalfFloatType})})),vel_viscous_out:(0,s.useMemo)((function(){return new p.WebGLRenderTarget(256,256,{type:p.HalfFloatType})})),div:(0,s.useMemo)((function(){return new p.WebGLRenderTarget(256,256,{type:p.HalfFloatType})})),pressure_0:(0,s.useMemo)((function(){return new p.WebGLRenderTarget(256,256,{type:p.HalfFloatType})})),pressure_1:(0,s.useMemo)((function(){return new p.WebGLRenderTarget(256,256,{type:p.HalfFloatType})})),pressure_out:(0,s.useMemo)((function(){return new p.WebGLRenderTarget(256,256,{type:p.HalfFloatType})}))};return{fbos:e,fbosResize:function(r,n){for(var t in e)e[t].setSize(r,n)}}};var T="\nattribute vec3 position;\nuniform vec2 px;\nuniform vec2 boundarySpace;\nvarying vec2 uv;\n\nprecision highp float;\n\nvoid main(){\n    vec3 pos = position;\n    vec2 scale = 1.0 - boundarySpace * 2.0;\n    pos.xy = pos.xy * scale;\n    uv = vec2(0.5)+(pos.xy)*0.5;\n    gl_Position = vec4(pos, 1.0);\n}\n";const M=function(e){var r=e.options,n=(0,c.useThree)(),t=n.gl,o=n.scene,u=n.camera,i=(0,s.useRef)(null),a=new p.Vector2,l=new p.Vector2,v=R(),f=v.fbos,y=v.fbosResize,g=(0,s.useMemo)((function(){return r.isBounce?new p.Vector2:a.clone()}),[a]),h={cellScale:a,fboSize:l,dt:r.dt,viscous:r.viscous,iterations_viscous:r.iterations_viscous,iterations_poisson:r.iterations_poisson,isBounce:r.isBounce,BFECC:r.BFECC,boundarySpace:g},w=(0,s.useRef)({velocity:{value:f.vel_0.texture},boundarySpace:{value:h.boundarySpace}}),M=function(e,n){var t=function(e,n){return{x:Math.round(r.resolution*e),y:Math.round(r.resolution*n)}}(e,n),o=t.x,u=t.y;l.set(o,u),a.set(1/l.x,1/l.y),y(l.x,l.y)},C=d({onChange:M}),D=C.width,E=C.height;return(0,s.useEffect)((function(){M(D,E),o.add(i.current)}),[]),(0,c.useFrame)((function(){w.current.velocity.value=f.vel_0.texture,t.render(o,u)}),99),(0,x.jsxs)(x.Fragment,{children:[(0,x.jsx)(m,{src:f.vel_0,dst:f.vel_1,simProps:h,priority:1}),(0,x.jsx)(_,{dst:f.vel_1,cellScale:a,cursorSize:r.cursor_size,mouseForce:r.mouse_force,priority:2}),(0,x.jsx)(S,{src:f.vel_1,dst0:f.vel_viscous0,dst1:f.vel_viscous1,dst:f.vel_viscous_out,simProps:h,priority:3}),(0,x.jsx)(b,{src:f.vel_viscous_out,dst:f.div,simProps:h,priority:4}),(0,x.jsx)(j,{src:f.div,dst0:f.pressure_0,dst1:f.pressure_1,dst:f.pressure_out,simProps:h,priority:5}),(0,x.jsx)(F,{src_p:f.pressure_out,src_v:f.vel_viscous_out,dst:f.vel_0,simProps:h,priority:6}),(0,x.jsxs)("mesh",{ref:i,children:[(0,x.jsx)("planeGeometry",{args:[2,2]}),(0,x.jsx)("rawShaderMaterial",{vertexShader:T,fragmentShader:"\nprecision highp float;\nuniform sampler2D velocity;\nvarying vec2 uv;\n\nvoid main(){\n    vec2 vel = texture2D(velocity, uv).xy;\n    float len = length(vel);\n    vel = vel * 0.5 + 0.5;\n    \n    vec3 color = vec3(vel.x, vel.y, 1.0);\n    color = mix(vec3(1.0), color, len);\n\n    gl_FragColor = vec4(color,  1.0);\n}\n",uniforms:w.current})]})]})};const C=function(e){var r=e.options,n=void 0===r?{iterations_poisson:32,iterations_viscous:64,mouse_force:120,resolution:.5,cursor_size:100,viscous:150,isBounce:!0,dt:.014,BFECC:!0}:r,t=e.style;return(0,x.jsx)(c.Canvas,{onCreated:function(e){e.gl.autoClear=!1},style:t,children:(0,x.jsx)(M,{options:n})})},D=C;return i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,